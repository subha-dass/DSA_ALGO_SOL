#link- https://leetcode.com/problems/maximum-width-of-binary-tree/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    class pair{
        TreeNode node;
        int num;
        pair(TreeNode node,int num){
            this.node=node;
            this.num=num;
        }
    }
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null){
            return 0;
        }
        Queue<pair> q=new LinkedList<>();
        int result=0;
        q.add(new pair(root,0));
        while(!q.isEmpty()){
            int size=q.size();
            int mmin=q.peek().num;
            int lastnode=0;
            int currnode=0;
            for(int i=0;i<size;i++){
                int curr_id=q.peek().num-mmin;
                TreeNode n=q.poll().node;
                if(i==0)currnode=curr_id;
                if(i==size-1)lastnode=curr_id;
                if(n.left!=null){
                    q.add(new pair(n.left,curr_id*2+1));
                }if(n.right!=null){
                    q.add(new pair(n.right,curr_id*2+2));
                }
            }
            result=Math.max(result,lastnode-currnode+1);
        }
        return result;
    }
}