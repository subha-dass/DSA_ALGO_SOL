#link- https://leetcode.com/problems/same-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        Queue<TreeNode> q1=new LinkedList<>();
        Queue<TreeNode> q2=new LinkedList<>();
        if(p==null && q==null){
            return true;
        }
        if(p==null || q==null){
            return false;
        }
        
        q1.add(p);
        q2.add(q);

        while(!q1.isEmpty() || !q2.isEmpty()){
            int u1=q1.size();
            int u2=q2.size();
            if(u1!=u2){
                return false;
            }
            for(int i=0;i<u1;i++){
                TreeNode v1=q1.poll();
                TreeNode v2=q2.poll();
                if (v1 != null && v2 != null) {
                    if (v1.val != v2.val) {
                        return false;
                    }
                }
                if(v1.left!=null && v2.left!=null){
                    q1.add(v1.left);
                    q2.add(v2.left);
                }else if(v1.left!=null || v2.left!=null){
                    return false;
                }if(v1.right!=null && v2.right!=null){
                    q1.add(v1.right);
                    q2.add(v2.right);
                }else if(v1.right!=null || v2.right!=null){
                    return false;
                }
            }
        }
        return true;
    }
}