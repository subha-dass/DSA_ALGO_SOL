#link-https://www.codingninjas.com/studio/problems/985311?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website

Perform DFS traversal of the graph. Push node to stack before returning.

Find the transpose graph by reversing the edges.

Pop nodes one by one from the stack and again to DFS on the modified graph.

import java.util.ArrayList;
import java.util.Stack;
import java.util.List;

public class Solution {
    public static void kosaraju(ArrayList<ArrayList<Integer>> adjList,int n,List<List<Integer>> l){
        boolean[] visited=new boolean[n];
        Stack<Integer> st=new Stack<Integer>();
        for(int i=0;i<n;i++){
            if(!visited[i]){
                DFS1(adjList,n,visited,st,i);
            }
        }

        ArrayList<ArrayList<Integer>> arrT=new ArrayList<>();
        for(int i=0;i<n;i++){
            arrT.add(new ArrayList<>());
        }

        for(int i = 0;i<n;i++) {
			visited[i] = false; 
			for(Integer it: adjList.get(i)) {
				arrT.get(it).add(i); 
			}
		}
        
        while(!st.isEmpty()){
            int node=st.pop();
            if(!visited[node]){
                ArrayList<Integer> arr=new ArrayList<>();
                revDFS(arrT,visited,arr,node);
                l.add(arr);
            }
        }
    }
    public static void revDFS(ArrayList<ArrayList<Integer>> arrT,boolean[] visited,ArrayList<Integer> arr,int u){
        visited[u]=true;
        arr.add(u);
        for(int v:arrT.get(u)){
            if(!visited[v]){
                revDFS(arrT, visited, arr, v);
            }
        }
    }
    public static void DFS1(ArrayList<ArrayList<Integer>> adjList,int n,boolean[] visited,Stack<Integer> st,int u){
        visited[u]=true;
        for(int i:adjList.get(u)){
            if(!visited[i]){
                DFS1(adjList, n, visited, st, i);
            }
        }
        st.push(u);
    }
    public static List<List<Integer>> stronglyConnectedComponents(int n, int[][] edges) {
        // Write your code here
        ArrayList<ArrayList<Integer>> adjList=new ArrayList<>();
        for(int i=0;i<n;i++){
            adjList.add(new ArrayList<>());
        }
        for(int[] edge:edges){
            adjList.get(edge[0]).add(edge[1]);
        }
        List<List<Integer>> l=new ArrayList<>();
        kosaraju(adjList,n,l);
        return l;
    }
}