#link-https://www.geeksforgeeks.org/problems/depth-first-traversal-for-a-graph/1
class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public void DFSRec(int V,ArrayList<ArrayList<Integer>> adj,boolean visited[],int s,ArrayList<Integer> ar){
        visited[s]=true;
        ar.add(s);
        for(int u:adj.get(s)){
            if(visited[u]==false)
                DFSRec(V,adj,visited,u,ar);
        }
    }
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] visited=new boolean[V+1];
        ArrayList<Integer> ar=new ArrayList<>();
        DFSRec(V,adj,visited,0,ar);
        return ar;
    }
}

#link-https://www.codingninjas.com/studio/problems/dfs-traversal_630462?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf

import java.util.ArrayList;

public class Solution {
    public static void DFSGraph(int s,int v, int e, ArrayList<ArrayList<Integer>> edges,ArrayList<Integer>arr,boolean[] visited){
        visited[s]=true;
        arr.add(s);
        for(int u:edges.get(s)){
            if(!visited[u]){
                DFSGraph(u, v, e, edges, arr, visited);
            }
        }
    }
    public static ArrayList<ArrayList<Integer>> depthFirstSearch(int v, int e, ArrayList<ArrayList<Integer>> edges) {
        // Write your code here.
        ArrayList<ArrayList<Integer>> adj=new ArrayList<ArrayList<Integer>>();
        for(int i=0;i<v;i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int i=0;i<edges.size();i++){
            int s=edges.get(i).get(0);
            int d=edges.get(i).get(1);
            adj.get(s).add(d);
            adj.get(d).add(s);
        }
        boolean[] visited=new boolean[adj.size()];
        
        ArrayList<ArrayList<Integer>> result=new ArrayList<ArrayList<Integer>>();
        
        
        for(int i=0;i<v;i++){
            if(!visited[i]){
                ArrayList<Integer> arr=new ArrayList<>();
                DFSGraph(i,v,e,adj,arr,visited);
                result.add(arr);
            }
            
        }
        return result;
    }
}


##Coding ninja Solution
##link-https://www.codingninjas.com/studio/problems/920551?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTabValue=SUBMISSION
import java.util.ArrayList;

public class Solution {
    
    public static void addEdges(int s,int d,ArrayList<ArrayList<Integer>> adjList){
        adjList.get(s).add(d);
        adjList.get(d).add(s);
    }
    public static boolean DFSRec(ArrayList<ArrayList<Integer>> edges,int[] color,int node,int c){
        color[node]=c;
        for(int j:edges.get(node)){
            if(color[j]==-1){
                if(DFSRec(edges, color, j, 1-c)==false)return false;
            }else if(color[j]==c){
                return false;
            }
        }
        return true;
    }
    public static boolean isGraphBirpatite(ArrayList<ArrayList<Integer>> edges) {
        ArrayList<ArrayList<Integer>> adjList=new ArrayList<>();
        for(int i=0;i<edges.size();i++){
            adjList.add(new ArrayList<>());
        }
        // Write your code here
        int[] color=new int[edges.size()];
        for(int i=0;i<edges.size();i++){
            for(int j=0;j<edges.get(0).size();j++){
                if(edges.get(i).get(j)==1){
                    addEdges(i, j, adjList);
                }
            }
        }
        for(int i=0;i<edges.size();i++){
            color[i]=-1;
        }
        for(int i=0;i<edges.size();i++){
            if(color[i]==-1){
                if(DFSRec(adjList,color,i,0)==false){
                    return false;
                }
            }
        }
        return true;
    }
}