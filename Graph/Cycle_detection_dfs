#Cycle detection directed Graph DFS
#link-https://leetcode.com/problems/course-schedule/description/
class Solution {
    public int V; // Number of vertices
    public int[][] adjMatrix;
    public void addEdges(int u,int v){
        adjMatrix[u][v]=1;
    }
    public boolean DFSRec(int v,int n,int[][] pre,boolean[] recursionStack,boolean[] visited,int parent,int[][] adjMatrix){
        visited[v]=true;
        recursionStack[v]=true;
        for(int i=0;i<V;i++){
            if(adjMatrix[v][i]==1){
                if(!visited[i]){
                    if(DFSRec(i,n,pre,recursionStack,visited,v,adjMatrix)){
                        return true;
                    }
                }
                else if(recursionStack[i]){
                    return true;
            }
            }
        }
        recursionStack[v]=false;
        return false;
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int n=numCourses;
        V=n;
        adjMatrix=new int[V][V];
        
        for(int[] i:prerequisites){
            System.out.println(i[0]+" "+i[1]);
            addEdges(i[0],i[1]);
        }
        boolean[] visited=new boolean[n];
        boolean[] recursionStack = new boolean[n];
        boolean val=false;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                if(DFSRec(i,n,prerequisites,recursionStack,visited,-1,adjMatrix)){
                    return false;
                }
            }
        }
        
        
        return true;
    }
}