#Cycle detection directed Graph DFS
#link-https://leetcode.com/problems/course-schedule/description/
class Solution {
    public int V; // Number of vertices
    public int[][] adjMatrix;
    public void addEdges(int u,int v){
        adjMatrix[u][v]=1;
    }
    public boolean DFSRec(int v,int n,int[][] pre,boolean[] recursionStack,boolean[] visited,int parent,int[][] adjMatrix){
        visited[v]=true;
        recursionStack[v]=true;
        for(int i=0;i<V;i++){
            if(adjMatrix[v][i]==1){
                if(!visited[i]){
                    if(DFSRec(i,n,pre,recursionStack,visited,v,adjMatrix)){
                        return true;
                    }
                }
                else if(recursionStack[i]){
                    return true;
            }
            }
        }
        recursionStack[v]=false;
        return false;
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int n=numCourses;
        V=n;
        adjMatrix=new int[V][V];
        
        for(int[] i:prerequisites){
            System.out.println(i[0]+" "+i[1]);
            addEdges(i[0],i[1]);
        }
        boolean[] visited=new boolean[n];
        boolean[] recursionStack = new boolean[n];
        boolean val=false;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                if(DFSRec(i,n,prerequisites,recursionStack,visited,-1,adjMatrix)){
                    return false;
                }
            }
        }
        
        
        return true;
    }
}

##AdjList
class Solution {
    public int V; // Number of vertices
    
    public void addEdges(int u,int v,ArrayList<ArrayList<Integer>> adjMatrix){
        adjMatrix.get(u).add(v);
    }
    public boolean DFSRec(int v,int n,int[][] pre,boolean[] recursionStack,boolean[] visited,int parent,ArrayList<ArrayList<Integer>> adjMatrix){
        visited[v]=true;
        recursionStack[v]=true;
        for(int i:adjMatrix.get(v)){
            
                if(!visited[i]){
                    if(DFSRec(i,n,pre,recursionStack,visited,v,adjMatrix)){
                        return true;
                    }
                }
                else if(recursionStack[i]){
                    return true;
            }
            
        }
        recursionStack[v]=false;
        return false;
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int n=numCourses;
        V=n;
        ArrayList<ArrayList<Integer>> adjMatrix;
        adjMatrix=new ArrayList<>();
        for(int i=0;i<n;i++){
            adjMatrix.add(new ArrayList<>());
        }
        
        for(int[] i:prerequisites){
            System.out.println(i[0]+" "+i[1]);
            addEdges(i[0],i[1],adjMatrix);
        }
        boolean[] visited=new boolean[n];
        boolean[] recursionStack = new boolean[n];
        boolean val=false;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                if(DFSRec(i,n,prerequisites,recursionStack,visited,-1,adjMatrix)){
                    return false;
                }
            }
        }
        
        
        return true;
    }
}

##Cycle Detection directed Graph using BFS(topo sort)


class Solution {
    public int V; // Number of vertices
    
    public void addEdges(int u,int v,ArrayList<ArrayList<Integer>> adjMatrix) {
        adjMatrix.get(u).add(v);
    }
    public boolean toposort(ArrayList<ArrayList<Integer>> adjList){
        int[] indegree=new int[V];
        int c=0;
        for(int i=0;i<V;i++){
            for(int j:adjList.get(i)){
                indegree[j]++;
            }
        }
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        int index=0;
        while(!q.isEmpty()){
            int u=q.poll();
            
            for(int v:adjList.get(u)){
                if(--indegree[v]==0){
                    q.add(v);
                }
            }
            c++;
        }
        if(c != V){
            return true;
        }
        return false;
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int n=numCourses;
        V=n;
        ArrayList<ArrayList<Integer>> adjList;
        adjList=new ArrayList<>();
        for(int i=0;i<n;i++){
            adjList.add(new ArrayList<>());
        }
        
        for(int[] i:prerequisites){
            System.out.println(i[0]+" "+i[1]);
            addEdges(i[0],i[1],adjList);
        }
        
        if(toposort(adjList)){
            return false;
        }return true;
        
    }
}