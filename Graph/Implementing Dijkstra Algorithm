#link- https://www.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1
//{ Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass
{
    public static void main(String args[]) throws IOException {

        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String str[] = read.readLine().trim().split(" ");
            int V = Integer.parseInt(str[0]);
            int E = Integer.parseInt(str[1]);
    
            ArrayList<ArrayList<ArrayList<Integer>>> adj = new ArrayList<ArrayList<ArrayList<Integer>>>();
            for(int i=0;i<V;i++)
            {
                adj.add(new ArrayList<ArrayList<Integer>>());
            }
            
            int i=0;
            while (i++<E) {
                String S[] = read.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                int w = Integer.parseInt(S[2]);
                ArrayList<Integer> t1 = new ArrayList<Integer>();
                ArrayList<Integer> t2 = new ArrayList<Integer>();
                t1.add(v);
                t1.add(w);
                t2.add(u);
                t2.add(w);
                adj.get(u).add(t1);
                adj.get(v).add(t2);
            }
            
            int S = Integer.parseInt(read.readLine());
            
            Solution ob = new Solution();
            
            int[] ptr = ob.dijkstra(V, adj, S);
            
            for(i=0; i<V; i++)
                System.out.print(ptr[i] + " ");
            System.out.println();
        }
    }
}
// } Driver Code Ends


//User function Template for Java


class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static class Node implements Comparable<Node> {
        int v;
        int distance;
 
        public Node(int v, int distance)
        {
            this.v = v;
            this.distance = distance;
        }
 
        @Override public int compareTo(Node n)
        {
            if (this.distance <= n.distance) {
                return -1;
            }
            else {
                return 1;
            }
        }
    }
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        HashMap<Integer,Node> map=new HashMap<>();
        PriorityQueue<Node> pq=new PriorityQueue<>();
        pq.add(new Node(S,0));
        map.put(S,new Node(S,0));
        boolean[] visited=new boolean[V];
        
        while(!pq.isEmpty()){
            Node n=pq.poll();
            int v=n.v;
            int dis=n.distance;
            visited[v]=true;
            ArrayList<ArrayList<Integer>> adjList=adj.get(v);
            for(ArrayList<Integer> adj1:adjList){
                if(!visited[adj1.get(0)]){
                    if(!map.containsKey(adj1.get(0))){
                        map.put(adj1.get(0),new Node(adj1.get(0),dis+adj1.get(1)));
                    }else{
                        if(dis+adj1.get(1)<map.get(adj1.get(0)).distance){
                        map.put(adj1.get(0),new Node(adj1.get(0),dis+adj1.get(1)));
                        }
                    }
                    pq.add(new Node(adj1.get(0),dis+adj1.get(1)));
                }
                
            }
        }
        int[] result=new int[V];
        for(int i=0;i<V;i++){
            result[i]=map.get(i).distance;
        }
        return result;
    }
    
    }
