#link- https://leetcode.com/problems/longest-increasing-subsequence/

class Solution {
    public int findIn(int[] nums,int n,int prev,int ind,int[][] dp){
        if(ind==n){
            return 0;
        }
        if(dp[ind][prev+1]!=-1) return dp[ind][prev+1];
        int len=0+findIn(nums,n,prev,ind+1,dp);
        if(prev==-1 || nums[ind]>nums[prev]){
            len=Math.max(len,1+findIn(nums,n,ind,ind+1,dp));
        }
        return dp[ind][prev+1]=len;
    }
    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        int[][] dp=new int[n][n+1];
        for(int i=0;i<n;i++){
            Arrays.fill(dp[i],-1);
        }
        int res=findIn(nums,n,-1,0,dp);
        return res;
    }
}